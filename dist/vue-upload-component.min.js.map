<<<<<<< HEAD
{"version":3,"file":"vue-upload-component.min.js","sources":["../src/utils/request.js","../src/chunk/ChunkUploadHandler.js","../src/InputFile.vue.js?rollup-plugin-vue=script.js","../src/FileUpload.vue.js?rollup-plugin-vue=script.js"],"sourcesContent":["/**\n * Creates a XHR request\n *\n * @param {Object} options\n */\nexport const createRequest = (options) => {\n  const xhr = new XMLHttpRequest()\n  xhr.open(options.method || 'GET', options.url)\n  xhr.responseType = 'json'\n  if (options.headers) {\n    Object.keys(options.headers).forEach(key => {\n      xhr.setRequestHeader(key, options.headers[key])\n    })\n  }\n\n  return xhr\n}\n\n/**\n * Sends a XHR request with certain body\n *\n * @param {XMLHttpRequest} xhr\n * @param {Object} body\n */\nexport const sendRequest = (xhr, body) => {\n  return new Promise((resolve, reject) => {\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        var response\n        try {\n          response = JSON.parse(xhr.response)\n        } catch (err) {\n          response = xhr.response\n        }\n        resolve(response)\n      } else {\n        reject(xhr.response)\n      }\n    }\n    xhr.onerror = () => reject(xhr.response)\n    xhr.send(JSON.stringify(body))\n  })\n}\n\n/**\n * Sends a XHR request with certain form data\n *\n * @param {XMLHttpRequest} xhr\n * @param {Object} data\n */\nexport const sendFormRequest = (xhr, data) => {\n  const body = new FormData()\n  for (var name in data) {\n    body.append(name, data[name])\n  }\n\n  return new Promise((resolve, reject) => {\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        var response\n        try {\n          response = JSON.parse(xhr.response)\n        } catch (err) {\n          response = xhr.response\n        }\n        resolve(response)\n      } else {\n        reject(xhr.response)\n      }\n    }\n    xhr.onerror = () => reject(xhr.response)\n    xhr.send(body)\n  })\n}\n\n/**\n * Creates and sends XHR request\n *\n * @param {Object} options\n *\n * @returns Promise\n */\nexport default function (options) {\n  const xhr = createRequest(options)\n\n  return sendRequest(xhr, options.body)\n}\n","import {\n  default as request,\n  createRequest,\n  sendFormRequest\n} from '../utils/request'\n\nexport default class ChunkUploadHandler {\n  /**\n   * Constructor\n   *\n   * @param {File} file\n   * @param {Object} options\n   */\n  constructor (file, options) {\n    this.file = file\n    this.options = options\n  }\n\n  /**\n   * Gets the max retries from options\n   */\n  get maxRetries () {\n    return parseInt(this.options.maxRetries)\n  }\n\n  /**\n   * Gets the max number of active chunks being uploaded at once from options\n   */\n  get maxActiveChunks () {\n    return parseInt(this.options.maxActive)\n  }\n\n  /**\n   * Gets the file type\n   */\n  get fileType () {\n    return this.file.type\n  }\n\n  /**\n   * Gets the file size\n   */\n  get fileSize () {\n    return this.file.size\n  }\n\n  /**\n   * Gets action (url) to upload the file\n   */\n  get action () {\n    return this.options.action || null\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in start phase\n   */\n  get startBody () {\n    return this.options.startBody || {}\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in upload phase\n   */\n  get uploadBody () {\n    return this.options.uploadBody || {}\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in finish phase\n   */\n  get finishBody () {\n    return this.options.finishBody || {}\n  }\n\n  /**\n   * Gets the headers of the requests from options\n   */\n  get headers () {\n    return this.options.headers || {}\n  }\n\n  /**\n   * Whether it's ready to upload files or not\n   */\n  get readyToUpload () {\n    return !!this.chunks\n  }\n\n  /**\n   * Gets the progress of the chunk upload\n   * - Gets all the completed chunks\n   * - Gets the progress of all the chunks that are being uploaded\n   */\n  get progress () {\n    const completedProgress = (this.chunksUploaded.length / this.chunks.length) * 100\n    const uploadingProgress = this.chunksUploading.reduce((progress, chunk) => {\n      return progress + ((chunk.progress | 0) / this.chunks.length)\n    }, 0)\n\n    return Math.min(completedProgress + uploadingProgress, 100)\n  }\n\n  /**\n   * Gets all the chunks that are pending to be uploaded\n   */\n  get chunksToUpload () {\n    return this.chunks.filter(chunk => {\n      return !chunk.active && !chunk.uploaded\n    })\n  }\n\n  /**\n   * Whether there are chunks to upload or not\n   */\n  get hasChunksToUpload () {\n    return this.chunksToUpload.length > 0\n  }\n\n  /**\n   * Gets all the chunks that are uploading\n   */\n  get chunksUploading () {\n    return this.chunks.filter(chunk => {\n      return !!chunk.xhr && !!chunk.active\n    })\n  }\n\n  /**\n   * Gets all the chunks that have finished uploading\n   */\n  get chunksUploaded () {\n    return this.chunks.filter(chunk => {\n      return !!chunk.uploaded\n    })\n  }\n\n  /**\n   * Creates all the chunks in the initial state\n   */\n  createChunks () {\n    this.chunks = []\n\n    let start = 0\n    let end = this.chunkSize\n    while (start < this.fileSize) {\n      this.chunks.push({\n        blob: this.file.file.slice(start, end),\n        startOffset: start,\n        active: false,\n        retries: this.maxRetries\n      })\n      start = end\n      end = start + this.chunkSize\n    }\n  }\n\n  /**\n   * Updates the progress of the file with the handler's progress\n   */\n  updateFileProgress () {\n    this.file.progress = this.progress\n  }\n\n  /**\n   * Paues the upload process\n   * - Stops all active requests\n   * - Sets the file not active\n   */\n  pause () {\n    this.file.active = false\n    this.stopChunks()\n  }\n\n  /**\n   * Stops all the current chunks\n   */\n  stopChunks () {\n    this.chunksUploading.forEach(chunk => {\n      chunk.xhr.abort()\n      chunk.active = false\n    })\n  }\n\n  /**\n   * Resumes the file upload\n   * - Sets the file active\n   * - Starts the following chunks\n   */\n  resume () {\n    this.file.active = true\n    this.startChunking()\n  }\n\n  /**\n   * Starts the file upload\n   *\n   * @returns Promise\n   * - resolve  The file was uploaded\n   * - reject   The file upload failed\n   */\n  upload () {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve\n      this.reject = reject\n    })\n    this.start()\n\n    return this.promise\n  }\n\n  /**\n   * Start phase\n   * Sends a request to the backend to initialise the chunks\n   */\n  start () {\n    request({\n      method: 'POST',\n      headers: Object.assign({}, this.headers, {\n        'Content-Type': 'application/json'\n      }),\n      url: this.action,\n      body: Object.assign(this.startBody, {\n        phase: 'start',\n        mime_type: this.fileType,\n        size: this.fileSize\n      })\n    }).then(res => {\n      if (res.status !== 'success') {\n        this.file.response = res\n        return this.reject('server')\n      }\n\n      this.sessionId = res.data.session_id\n      this.chunkSize = res.data.end_offset\n\n      this.createChunks()\n      this.startChunking()\n    }).catch(res => {\n      this.file.response = res\n      this.reject('server')\n    })\n  }\n\n  /**\n   * Starts to upload chunks\n   */\n  startChunking () {\n    for (let i = 0; i < this.maxActiveChunks; i++) {\n      this.uploadNextChunk()\n    }\n  }\n\n  /**\n   * Uploads the next chunk\n   * - Won't do anything if the process is paused\n   * - Will start finish phase if there are no more chunks to upload\n   */\n  uploadNextChunk () {\n    if (this.file.active) {\n      if (this.hasChunksToUpload) {\n        return this.uploadChunk(this.chunksToUpload[0])\n      }\n\n      if (this.chunksUploading.length === 0) {\n        return this.finish()\n      }\n    }\n  }\n\n  /**\n   * Uploads a chunk\n   * - Sends the chunk to the backend\n   * - Sets the chunk as uploaded if everything went well\n   * - Decreases the number of retries if anything went wrong\n   * - Fails if there are no more retries\n   *\n   * @param {Object} chunk\n   */\n  uploadChunk (chunk) {\n    chunk.progress = 0\n    chunk.active = true\n    this.updateFileProgress()\n    chunk.xhr = createRequest({\n      method: 'POST',\n      headers: this.headers,\n      url: this.action\n    })\n\n    chunk.xhr.upload.addEventListener('progress', function (evt) {\n      if (evt.lengthComputable) {\n        chunk.progress = Math.round(evt.loaded / evt.total * 100)\n      }\n    }, false)\n\n    sendFormRequest(chunk.xhr, Object.assign(this.uploadBody, {\n      phase: 'upload',\n      session_id: this.sessionId,\n      start_offset: chunk.startOffset,\n      chunk: chunk.blob\n    })).then(res => {\n      chunk.active = false\n      if (res.status === 'success') {\n        chunk.uploaded = true\n      } else {\n        if (chunk.retries-- <= 0) {\n          this.stopChunks()\n          return this.reject('upload')\n        }\n      }\n\n      this.uploadNextChunk()\n    }).catch(() => {\n      chunk.active = false\n      if (chunk.retries-- <= 0) {\n        this.stopChunks()\n        return this.reject('upload')\n      }\n\n      this.uploadNextChunk()\n    })\n  }\n\n  /**\n   * Finish phase\n   * Sends a request to the backend to finish the process\n   */\n  finish () {\n    this.updateFileProgress()\n\n    request({\n      method: 'POST',\n      headers: Object.assign({}, this.headers, {\n        'Content-Type': 'application/json'\n      }),\n      url: this.action,\n      body: Object.assign(this.finishBody, {\n        phase: 'finish',\n        session_id: this.sessionId\n      })\n    }).then(res => {\n      this.file.response = res\n      if (res.status !== 'success') {\n        return this.reject('server')\n      }\n\n      this.resolve(res)\n    }).catch(res => {\n      this.file.response = res\n      this.reject('server')\n    })\n  }\n}\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  methods: {\n    change(e) {\n      this.$destroy()\n      this.$parent.addInputFile(e.target)\n      // eslint-disable-next-line\n      new this.constructor({\n        parent: this.$parent,\n        el: this.$el,\n      })\n    }\n  }\n}\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ChunkUploadDefaultHandler from './chunk/ChunkUploadHandler'\nimport InputFile from './InputFile.vue'\n\nconst CHUNK_DEFAULT_OPTIONS = {\n  headers: {},\n  action: '',\n  minSize: 1048576,\n  maxActive: 3,\n  maxRetries: 5,\n\n  handler: ChunkUploadDefaultHandler\n}\n\nexport default {\n  components: {\n    InputFile,\n  },\n  props: {\n    inputId: {\n      type: String,\n    },\n\n    name: {\n      type: String,\n      default: 'file',\n    },\n\n    accept: {\n      type: String,\n    },\n\n    capture: {\n    },\n\n    multiple: {\n      type: Boolean,\n    },\n\n    maximum: {\n      type: Number,\n      default() {\n        return this.multiple ? 0 : 1\n      }\n    },\n\n    addIndex: {\n      type: [Boolean, Number],\n    },\n\n    directory: {\n      type: Boolean,\n    },\n\n    postAction: {\n      type: String,\n    },\n\n    putAction: {\n      type: String,\n    },\n\n    customAction: {\n      type: Function,\n    },\n\n    headers: {\n      type: Object,\n      default: Object,\n    },\n\n    data: {\n      type: Object,\n      default: Object,\n    },\n\n    timeout: {\n      type: Number,\n      default: 0,\n    },\n\n\n    drop: {\n      default: false,\n    },\n\n    dropDirectory: {\n      type: Boolean,\n      default: true,\n    },\n\n    size: {\n      type: [Function, Number],\n      default: 0,\n    },\n\n    extensions: {\n      default: Array,\n    },\n\n\n    value: {\n      type: Array,\n      default: Array,\n    },\n\n    thread: {\n      type: Number,\n      default: 1,\n    },\n\n    // Chunk upload enabled\n    chunkEnabled: {\n      type: Boolean,\n      default: false\n    },\n\n    // Chunk upload properties\n    chunk: {\n      type: Object,\n      default: () => {\n        return CHUNK_DEFAULT_OPTIONS\n      }\n    }\n  },\n\n  data() {\n    return {\n      files: this.value,\n      features: {\n        html5: true,\n        directory: false,\n        drag: false,\n      },\n\n      active: false,\n      dropActive: false,\n\n      uploading: 0,\n\n      destroy: false,\n    }\n  },\n\n\n  /**\n   * mounted\n   * @return {[type]} [description]\n   */\n  mounted() {\n    let input = document.createElement('input')\n    input.type = 'file'\n    input.multiple = true\n\n    // html5 特征\n    if (window.FormData && input.files) {\n      // 上传目录特征\n      if (typeof input.webkitdirectory === 'boolean' || typeof input.directory === 'boolean') {\n        this.features.directory = true\n      }\n\n      // 拖拽特征\n      if (this.features.html5 && typeof input.ondrop !== 'undefined') {\n        this.features.drop = true\n      }\n    } else {\n      this.features.html5 = false\n    }\n\n    // files 定位缓存\n    this.maps = {}\n\n    this.$nextTick(function () {\n\n      // 更新下父级\n      if (this.$parent) {\n        this.$parent.$forceUpdate()\n      }\n\n      // 拖拽渲染\n      this.watchDrop(this.drop)\n    })\n  },\n\n  /**\n   * beforeDestroy\n   * @return {[type]} [description]\n   */\n  beforeDestroy() {\n    // 已销毁\n    this.destroy = true\n\n    // 设置成不激活\n    this.active = false\n  },\n\n  computed: {\n    /**\n     * uploading 正在上传的线程\n     * @return {[type]} [description]\n     */\n\n    /**\n     * uploaded 文件列表是否全部已上传\n     * @return {[type]} [description]\n     */\n    uploaded() {\n      let file\n      for (let i = 0; i < this.files.length; i++) {\n        file = this.files[i]\n        if (file.fileObject && !file.error && !file.success) {\n          return false\n        }\n      }\n      return true\n    },\n\n    chunkOptions () {\n      return Object.assign(CHUNK_DEFAULT_OPTIONS, this.chunk)\n    },\n\n    className() {\n      return [\n        'file-uploads',\n        this.features.html5 ? 'file-uploads-html5' : 'file-uploads-html4',\n        this.features.directory && this.directory ? 'file-uploads-directory' : undefined,\n        this.features.drop && this.drop ? 'file-uploads-drop' : undefined,\n      ]\n    }\n  },\n\n\n  watch: {\n    active(active) {\n      this.watchActive(active)\n    },\n\n    dropActive() {\n      if (this.$parent) {\n        this.$parent.$forceUpdate()\n      }\n    },\n\n    drop(value) {\n      this.watchDrop(value)\n    },\n\n    value(files) {\n      if (this.files === files) {\n        return\n      }\n      this.files = files\n\n      let oldMaps = this.maps\n\n      // 重写 maps 缓存\n      this.maps = {}\n      for (let i = 0; i < this.files.length; i++) {\n        let file = this.files[i]\n        this.maps[file.id] = file\n      }\n\n      // add, update\n      for (let key in this.maps) {\n        let newFile = this.maps[key]\n        let oldFile = oldMaps[key]\n        if (newFile !== oldFile) {\n          this.emitFile(newFile, oldFile)\n        }\n      }\n\n      // delete\n      for (let key in oldMaps) {\n        if (!this.maps[key]) {\n          this.emitFile(undefined, oldMaps[key])\n        }\n      }\n    },\n  },\n\n  methods: {\n\n    // 清空\n    clear() {\n      if (this.files.length) {\n        let files = this.files\n        this.files = []\n\n        // 定位\n        this.maps = {}\n\n        // 事件\n        this.emitInput()\n        for (let i = 0; i < files.length; i++) {\n          this.emitFile(undefined, files[i])\n        }\n      }\n      return true\n    },\n\n    // 选择\n    get(id) {\n      if (!id) {\n        return false\n      }\n\n      if (typeof id === 'object') {\n        return this.maps[id.id] || false\n      }\n\n      return this.maps[id] || false\n    },\n\n    // 添加\n    add(_files, index = this.addIndex) {\n      let files = _files\n      let isArray = files instanceof Array\n\n      // 不是数组整理成数组\n      if (!isArray) {\n        files = [files]\n      }\n\n      // 遍历规范对象\n      let addFiles = []\n      for (let i = 0; i < files.length; i++) {\n        let file = files[i]\n        if (this.features.html5 && file instanceof Blob) {\n          file = {\n            file,\n            size: file.size,\n            name: file.webkitRelativePath || file.relativePath || file.name || 'unknown',\n            type: file.type,\n          }\n        }\n        let fileObject = false\n        if (file.fileObject === false) {\n          // false\n        } else if (file.fileObject) {\n          fileObject = true\n        } else if (typeof Element !== 'undefined' && file.el instanceof Element) {\n          fileObject = true\n        } else if (typeof Blob !== 'undefined' && file.file instanceof Blob) {\n          fileObject = true\n        }\n        if (fileObject) {\n          file = {\n            fileObject: true,\n            size: -1,\n            name: 'Filename',\n            type: '',\n            active: false,\n            error: '',\n            success: false,\n            putAction: this.putAction,\n            postAction: this.postAction,\n            timeout: this.timeout,\n            ...file,\n            response: {},\n\n            progress: '0.00',          // 只读\n            speed: 0,                  // 只读\n            // xhr: false,                // 只读\n            // iframe: false,             // 只读\n          }\n\n          file.data = {\n            ...this.data,\n            ...file.data ? file.data : {},\n          }\n\n          file.headers = {\n            ...this.headers,\n            ...file.headers ? file.headers : {},\n          }\n        }\n\n        // 必须包含 id\n        if (!file.id) {\n          file.id = Math.random().toString(36).substr(2)\n        }\n\n        if (this.emitFilter(file, undefined)) {\n          continue\n        }\n\n        // 最大数量限制\n        if (this.maximum > 1 && (addFiles.length + this.files.length) >= this.maximum) {\n          break\n        }\n\n        addFiles.push(file)\n\n        // 最大数量限制\n        if (this.maximum === 1) {\n          break\n        }\n      }\n\n      // 没有文件\n      if (!addFiles.length) {\n        return false\n      }\n\n      // 如果是 1 清空\n      if (this.maximum === 1) {\n        this.clear()\n      }\n\n\n      // 添加进去 files\n      let newFiles\n      if (index === true || index === 0) {\n        newFiles = addFiles.concat(this.files)\n      } else if (index) {\n        newFiles = addFiles.concat([])\n        newFiles.splice(index, 0, addFiles)\n      } else {\n        newFiles = this.files.concat(addFiles)\n      }\n\n      this.files = newFiles\n\n      // 定位\n      for (let i = 0; i < addFiles.length; i++) {\n        let file = addFiles[i]\n        this.maps[file.id] = file\n      }\n\n      // 事件\n      this.emitInput()\n      for (let i = 0; i < addFiles.length; i++) {\n        this.emitFile(addFiles[i], undefined)\n      }\n\n      return isArray ? addFiles : addFiles[0]\n    },\n\n\n\n    // 添加表单文件\n    addInputFile(el) {\n      let files = []\n      if (el.files) {\n        for (let i = 0; i < el.files.length; i++) {\n          let file = el.files[i]\n          files.push({\n            size: file.size,\n            name: file.webkitRelativePath || file.relativePath || file.name,\n            type: file.type,\n            file,\n            el\n          })\n        }\n      } else {\n        files.push({\n          name: el.value.replace(/^.*?([^\\/\\\\\\r\\n]+)$/, '$1'),\n          el,\n        })\n      }\n      return this.add(files)\n    },\n\n\n    // 添加 DataTransfer\n    addDataTransfer(dataTransfer) {\n      let files = []\n      if (dataTransfer.items && dataTransfer.items.length) {\n        let items = []\n        for (let i = 0; i < dataTransfer.items.length; i++) {\n          let item = dataTransfer.items[i]\n          if (item.getAsEntry) {\n            item = item.getAsEntry() || item.getAsFile()\n          } else if (item.webkitGetAsEntry) {\n            item = item.webkitGetAsEntry() || item.getAsFile()\n          } else {\n            item = item.getAsFile()\n          }\n          if (item) {\n            items.push(item)\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          let forEach = (i) => {\n            let item = items[i]\n            // 结束 文件数量大于 最大数量\n            if (!item || (this.maximum > 0 && files.length >= this.maximum)) {\n              return resolve(this.add(files))\n            }\n            this.getEntry(item).then(function (results) {\n              files.push(...results)\n              forEach(i + 1)\n            })\n          }\n          forEach(0)\n        })\n      }\n\n      if (dataTransfer.files.length) {\n        for (let i = 0; i < dataTransfer.files.length; i++) {\n          files.push(dataTransfer.files[i])\n          if (this.maximum > 0 && files.length >= this.maximum) {\n            break\n          }\n        }\n        return Promise.resolve(this.add(files))\n      }\n\n      return Promise.resolve([])\n    },\n\n\n    // 获得 entry\n    getEntry(entry, path = '') {\n      return new Promise((resolve, reject) => {\n        if (entry.isFile) {\n          entry.file(function (file) {\n            resolve([\n              {\n                size: file.size,\n                name: path + file.name,\n                type: file.type,\n                file,\n              }\n            ])\n          })\n        } else if (entry.isDirectory && this.dropDirectory) {\n          let files = []\n          let dirReader = entry.createReader()\n          let readEntries = () => {\n            dirReader.readEntries((entries) => {\n              let forEach = (i) => {\n                if ((!entries[i] && i === 0) || (this.maximum > 0 && files.length >= this.maximum)) {\n                  return resolve(files)\n                }\n                if (!entries[i]) {\n                  return readEntries()\n                }\n                this.getEntry(entries[i], path + entry.name + '/').then((results) => {\n                  files.push(...results)\n                  forEach(i + 1)\n                })\n              }\n              forEach(0)\n            })\n          }\n          readEntries()\n        } else {\n          resolve([])\n        }\n      })\n    },\n\n\n    replace(id1, id2) {\n      let file1 = this.get(id1)\n      let file2 = this.get(id2)\n      if (!file1 || !file2 || file1 === file2) {\n        return false\n      }\n      let files = this.files.concat([])\n      let index1 = files.indexOf(file1)\n      let index2 = files.indexOf(file2)\n      if (index1 === -1 || index2 === -1) {\n        return false\n      }\n      files[index1] = file2\n      files[index2] = file1\n      this.files = files\n      this.emitInput()\n      return true\n    },\n\n    // 移除\n    remove(id) {\n      let file = this.get(id)\n      if (file) {\n        if (this.emitFilter(undefined, file)) {\n          return false\n        }\n        let files = this.files.concat([])\n        let index = files.indexOf(file)\n        if (index === -1) {\n          console.error('remove', file)\n          return false\n        }\n        files.splice(index, 1)\n        this.files = files\n\n        // 定位\n        delete this.maps[file.id]\n\n        // 事件\n        this.emitInput()\n        this.emitFile(undefined, file)\n      }\n      return file\n    },\n\n    // 更新\n    update(id, data) {\n      let file = this.get(id)\n      if (file) {\n        let newFile = {\n          ...file,\n          ...data\n        }\n        // 停用必须加上错误\n        if (file.fileObject && file.active && !newFile.active && !newFile.error && !newFile.success) {\n          newFile.error = 'abort'\n        }\n\n        if (this.emitFilter(newFile, file)) {\n          return false\n        }\n\n        let files = this.files.concat([])\n        let index = files.indexOf(file)\n        if (index === -1) {\n          console.error('update', file)\n          return false\n        }\n        files.splice(index, 1, newFile)\n        this.files = files\n\n        // 删除  旧定位 写入 新定位 （已便支持修改id)\n        delete this.maps[file.id]\n        this.maps[newFile.id] = newFile\n\n        // 事件\n        this.emitInput()\n        this.emitFile(newFile, file)\n        return newFile\n      }\n      return false\n    },\n\n\n\n    // 预处理 事件 过滤器\n    emitFilter(newFile, oldFile) {\n      let isPrevent = false\n      this.$emit('input-filter', newFile, oldFile, function () {\n        isPrevent = true\n        return isPrevent\n      })\n      return isPrevent\n    },\n\n    // 处理后 事件 分发\n    emitFile(newFile, oldFile) {\n      this.$emit('input-file', newFile, oldFile)\n      if (newFile && newFile.fileObject && newFile.active && (!oldFile || !oldFile.active)) {\n        this.uploading++\n        // 激活\n        this.$nextTick(function () {\n          setTimeout(() => {\n            this.upload(newFile).then(() => {\n              // eslint-disable-next-line\n              newFile = this.get(newFile)\n              if (newFile && newFile.fileObject) {\n                this.update(newFile, {\n                  active: false,\n                  success: !newFile.error\n                })\n              }\n            }).catch((e) => {\n              this.update(newFile, {\n                active: false,\n                success: false,\n                error: e.code || e.error || e.message || e\n              })\n            })\n          }, parseInt(Math.random() * 50 + 50, 10))\n        })\n      } else if ((!newFile || !newFile.fileObject || !newFile.active) && oldFile && oldFile.fileObject && oldFile.active) {\n        // 停止\n        this.uploading--\n      }\n\n      // 自动延续激活\n      if (this.active && (Boolean(newFile) !== Boolean(oldFile) || newFile.active !== oldFile.active)) {\n        this.watchActive(true)\n      }\n    },\n\n    emitInput() {\n      this.$emit('input', this.files)\n    },\n\n\n    // 上传\n    upload(id) {\n      let file = this.get(id)\n\n      // 被删除\n      if (!file) {\n        return Promise.reject('not_exists')\n      }\n\n      // 不是文件对象\n      if (!file.fileObject) {\n        return Promise.reject('file_object')\n      }\n\n      // 有错误直接响应\n      if (file.error) {\n        return Promise.reject(file.error)\n      }\n\n      // 已完成直接响应\n      if (file.success) {\n        return Promise.resolve(file)\n      }\n\n      // 后缀\n      let extensions = this.extensions\n      if (extensions && (extensions.length || typeof extensions.length === 'undefined')) {\n        if (typeof extensions !== 'object' || !(extensions instanceof RegExp)) {\n          if (typeof extensions === 'string') {\n            extensions = extensions.split(',').map(value => value.trim()).filter(value => value)\n          }\n          extensions = new RegExp('\\\\.(' + extensions.join('|').replace(/\\./g, '\\\\.') + ')$', 'i')\n        }\n        if (file.name.search(extensions) === -1) {\n          return Promise.reject('extension')\n        }\n      }\n\n      // 大小\n      let size = (typeof this.size === 'function' ? this.size(file) : this.size)\n\n      if (size > 0 && file.size >= 0 && file.size > size) {\n        return Promise.reject('size')\n      }\n\n      if (this.customAction) {\n        return this.customAction(file, this)\n      }\n\n      if (this.features.html5) {\n        if (this.shouldUseChunkUpload(file)) {\n          return this.uploadChunk(file)\n        }\n        if (file.putAction) {\n          return this.uploadPut(file)\n        }\n        if (file.postAction) {\n          return this.uploadHtml5(file)\n        }\n      }\n      if (file.postAction) {\n        return this.uploadHtml4(file)\n      }\n      return Promise.reject('No action configured')\n    },\n\n    /**\n     * Whether this file should be uploaded using chunk upload or not\n     *\n     * @param Object file\n     */\n    shouldUseChunkUpload (file) {\n      return this.chunkEnabled &&\n        !!this.chunkOptions.handler &&\n        file.size > this.chunkOptions.minSize\n    },\n\n    /**\n     * Upload a file using Chunk method\n     *\n     * @param File file\n     */\n    uploadChunk (file) {\n      const HandlerClass = this.chunkOptions.handler\n      file.chunk = new HandlerClass(file, this.chunkOptions)\n\n      return file.chunk.upload()\n    },\n\n    uploadPut(file) {\n      let querys = []\n      let value\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value !== null && value !== undefined) {\n          querys.push(encodeURIComponent(key) + '=' + encodeURIComponent(value))\n        }\n      }\n      let queryString = querys.length ? (file.putAction.indexOf('?') === -1 ? '?' : '&') + querys.join('&') : ''\n      let xhr = new XMLHttpRequest()\n      xhr.open('PUT', file.putAction + queryString)\n      return this.uploadXhr(xhr, file, file.file)\n    },\n\n    uploadHtml5(file) {\n      let form = new window.FormData()\n      let value\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\n          if (value instanceof File) {\n            form.append(key, value, value.name)\n          } else {\n            form.append(key, JSON.stringify(value))\n          }\n        } else if (value !== null && value !== undefined) {\n          form.append(key, value)\n        }\n      }\n      form.append(this.name, file.file, file.file.filename || file.name)\n      let xhr = new XMLHttpRequest()\n      xhr.open('POST', file.postAction)\n      return this.uploadXhr(xhr, file, form)\n    },\n\n    uploadXhr(xhr, _file, body) {\n      let file = _file\n      let speedTime = 0\n      let speedLoaded = 0\n\n      // 进度条\n      xhr.upload.onprogress = (e) => {\n        // 还未开始上传 已删除 未激活\n        file = this.get(file)\n        if (!e.lengthComputable || !file || !file.fileObject || !file.active) {\n          return\n        }\n\n        // 进度 速度 每秒更新一次\n        let speedTime2 = Math.round(Date.now() / 1000)\n        if (speedTime2 === speedTime) {\n          return\n        }\n        speedTime = speedTime2\n\n        file = this.update(file, {\n          progress: (e.loaded / e.total * 100).toFixed(2),\n          speed: e.loaded - speedLoaded,\n        })\n        speedLoaded = e.loaded\n      }\n\n      // 检查激活状态\n      let interval = setInterval(() => {\n        file = this.get(file)\n        if (file && file.fileObject && !file.success && !file.error && file.active) {\n          return\n        }\n\n        if (interval) {\n          clearInterval(interval)\n          interval = false\n        }\n\n        try {\n          xhr.abort()\n          xhr.timeout = 1\n        } catch (e) {\n        }\n      }, 100)\n\n      return new Promise((resolve, reject) => {\n        let complete\n        let fn = (e) => {\n          // 已经处理过了\n          if (complete) {\n            return\n          }\n          complete = true\n          if (interval) {\n            clearInterval(interval)\n            interval = false\n          }\n\n          file = this.get(file)\n\n          // 不存在直接响应\n          if (!file) {\n            return reject('not_exists')\n          }\n\n          // 不是文件对象\n          if (!file.fileObject) {\n            return reject('file_object')\n          }\n\n          // 有错误自动响应\n          if (file.error) {\n            return reject(file.error)\n          }\n\n          // 未激活\n          if (!file.active) {\n            return reject('abort')\n          }\n\n\n          // 已完成 直接相应\n          if (file.success) {\n            return resolve(file)\n          }\n\n          let data = {}\n\n          switch (e.type) {\n            case 'timeout':\n            case 'abort':\n              data.error = e.type\n              break\n            case 'error':\n              if (!xhr.status) {\n                data.error = 'network'\n              } else if (xhr.status >= 500) {\n                data.error = 'server'\n              } else if (xhr.status >= 400) {\n                data.error = 'denied'\n              }\n              break\n            default:\n              if (xhr.status >= 500) {\n                data.error = 'server'\n              } else if (xhr.status >= 400) {\n                data.error = 'denied'\n              } else {\n                data.progress = '100.00'\n              }\n          }\n\n          if (xhr.responseText) {\n            let contentType = xhr.getResponseHeader('Content-Type')\n            if (contentType && contentType.indexOf('/json') !== -1) {\n              data.response = JSON.parse(xhr.responseText)\n            } else {\n              data.response = xhr.responseText\n            }\n          }\n\n          // 更新\n          file = this.update(file, data)\n\n          // 相应错误\n          if (file.error) {\n            return reject(file.error)\n          }\n\n          // 响应\n          return resolve(file)\n        }\n\n        // 事件\n        xhr.onload = fn\n        xhr.onerror = fn\n        xhr.onabort = fn\n        xhr.ontimeout = fn\n\n        // 超时\n        if (file.timeout) {\n          xhr.timeout = file.timeout\n        }\n\n        // headers\n        for (let key in file.headers) {\n          xhr.setRequestHeader(key, file.headers[key])\n        }\n\n        // 更新 xhr\n        file = this.update(file, { xhr })\n\n        // 开始上传\n        xhr.send(body)\n      })\n    },\n\n\n\n\n    uploadHtml4(_file) {\n      let file = _file\n      let onKeydown = function (e) {\n        if (e.keyCode === 27) {\n          e.preventDefault()\n        }\n      }\n\n      let iframe = document.createElement('iframe')\n      iframe.id = 'upload-iframe-' + file.id\n      iframe.name = 'upload-iframe-' + file.id\n      iframe.src = 'about:blank'\n      iframe.setAttribute('style', 'width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;')\n\n\n      let form = document.createElement('form')\n\n      form.action = file.postAction\n\n      form.name = 'upload-form-' + file.id\n\n\n      form.setAttribute('method', 'POST')\n      form.setAttribute('target', 'upload-iframe-' + file.id)\n      form.setAttribute('enctype', 'multipart/form-data')\n\n      let value\n      let input\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\n          value = JSON.stringify(value)\n        }\n        if (value !== null && value !== undefined) {\n          input = document.createElement('input')\n          input.type = 'hidden'\n          input.name = key\n          input.value = value\n          form.appendChild(input)\n        }\n      }\n      form.appendChild(file.el)\n\n      document.body.appendChild(iframe).appendChild(form)\n\n\n\n\n      let getResponseData = function () {\n        let doc\n        try {\n          if (iframe.contentWindow) {\n            doc = iframe.contentWindow.document\n          }\n        } catch (err) {\n        }\n        if (!doc) {\n          try {\n            doc = iframe.contentDocument ? iframe.contentDocument : iframe.document\n          } catch (err) {\n            doc = iframe.document\n          }\n        }\n        if (doc && doc.body) {\n          return doc.body.innerHTML\n        }\n        return null\n      }\n\n\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          file = this.update(file, { iframe })\n\n          // 不存在\n          if (!file) {\n            return reject('not_exists')\n          }\n\n          // 定时检查\n          let interval = setInterval(() => {\n            file = this.get(file)\n            if (file && file.fileObject && !file.success && !file.error && file.active) {\n              return\n            }\n\n            if (interval) {\n              clearInterval(interval)\n              interval = false\n            }\n\n            iframe.onabort({ type: file ? 'abort' : 'not_exists' })\n          }, 100)\n\n\n          let complete\n          let fn = (e) => {\n            // 已经处理过了\n            if (complete) {\n              return\n            }\n            complete = true\n\n\n            if (interval) {\n              clearInterval(interval)\n              interval = false\n            }\n\n            // 关闭 esc 事件\n            document.body.removeEventListener('keydown', onKeydown)\n\n            file = this.get(file)\n\n            // 不存在直接响应\n            if (!file) {\n              return reject('not_exists')\n            }\n\n            // 不是文件对象\n            if (!file.fileObject) {\n              return reject('file_object')\n            }\n\n            // 有错误自动响应\n            if (file.error) {\n              return reject(file.error)\n            }\n\n            // 未激活\n            if (!file.active) {\n              return reject('abort')\n            }\n\n            // 已完成 直接相应\n            if (file.success) {\n              return resolve(file)\n            }\n\n            let response = getResponseData()\n            let data = {}\n            switch (e.type) {\n              case 'abort':\n                data.error = 'abort'\n                break\n              case 'error':\n                if (file.error) {\n                  data.error = file.error\n                } else if (response === null) {\n                  data.error = 'network'\n                } else {\n                  data.error = 'denied'\n                }\n                break\n              default:\n                if (file.error) {\n                  data.error = file.error\n                } else if (data === null) {\n                  data.error = 'network'\n                } else {\n                  data.progress = '100.00'\n                }\n            }\n\n            if (response !== null) {\n              if (response && response.substr(0, 1) === '{' && response.substr(response.length - 1, 1) === '}') {\n                try {\n                  response = JSON.parse(response)\n                } catch (err) {\n                }\n              }\n              data.response = response\n            }\n\n            // 更新\n            file = this.update(file, data)\n\n            if (file.error) {\n              return reject(file.error)\n            }\n\n            // 响应\n            return resolve(file)\n          }\n\n\n          // 添加事件\n          iframe.onload = fn\n          iframe.onerror = fn\n          iframe.onabort = fn\n\n\n          // 禁止 esc 键\n          document.body.addEventListener('keydown', onKeydown)\n\n          // 提交\n          form.submit()\n        }, 50)\n      }).then(function (res) {\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\n        return res\n      }).catch(function (res) {\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\n        return res\n      })\n    },\n\n\n\n    watchActive(active) {\n      let file\n      let index = 0\n      while ((file = this.files[index])) {\n        index++\n        if (!file.fileObject) {\n          // 不是文件对象\n        } else if (active && !this.destroy) {\n          if (this.uploading >= this.thread || (this.uploading && !this.features.html5)) {\n            break\n          }\n          if (!file.active && !file.error && !file.success) {\n            this.update(file, { active: true })\n          }\n        } else {\n          if (file.active) {\n            this.update(file, { active: false })\n          }\n        }\n      }\n      if (this.uploading === 0) {\n        this.active = false\n      }\n    },\n\n\n    watchDrop(_el) {\n      let el = _el\n      if (!this.features.drop) {\n        return\n      }\n\n      // 移除挂载\n      if (this.dropElement) {\n        try {\n          document.removeEventListener('dragenter', this.onDragenter, false)\n          document.removeEventListener('dragleave', this.onDragleave, false)\n          document.removeEventListener('drop', this.onDocumentDrop, false)\n          this.dropElement.removeEventListener('dragover', this.onDragover, false)\n          this.dropElement.removeEventListener('drop', this.onDrop, false)\n        } catch (e) {\n        }\n      }\n\n      if (!el) {\n        el = false\n      } else if (typeof el === 'string') {\n        el = document.querySelector(el) || this.$root.$el.querySelector(el)\n      } else if (el === true) {\n        el = this.$parent.$el\n      }\n\n      this.dropElement = el\n\n      if (this.dropElement) {\n        document.addEventListener('dragenter', this.onDragenter, false)\n        document.addEventListener('dragleave', this.onDragleave, false)\n        document.addEventListener('drop', this.onDocumentDrop, false)\n        this.dropElement.addEventListener('dragover', this.onDragover, false)\n        this.dropElement.addEventListener('drop', this.onDrop, false)\n      }\n    },\n\n\n    onDragenter(e) {\n      e.preventDefault()\n      if (!this.dropActive) {\n        this.dropActive = true\n      }\n    },\n\n    onDragleave(e) {\n      e.preventDefault()\n      if (e.target.nodeName === 'HTML' || e.target === e.explicitOriginalTarget || (e.screenX === 0 && e.screenY === 0 && !e.fromElement && e.offsetX <= 0)) {\n        this.dropActive = false\n      }\n    },\n\n    onDragover(e) {\n      e.preventDefault()\n    },\n\n    onDocumentDrop() {\n      this.dropActive = false\n    },\n\n    onDrop(e) {\n      e.preventDefault()\n      this.addDataTransfer(e.dataTransfer)\n    },\n  }\n}\n"],"names":["createRequest","options","xhr","XMLHttpRequest","open","method","url","responseType","headers","keys","forEach","setRequestHeader","key","body","Promise","resolve","reject","onload","status","response","JSON","parse","err","onerror","send","stringify","ChunkUploadHandler","file","chunks","start","end","this","chunkSize","fileSize","push","slice","maxRetries","progress","active","stopChunks","chunksUploading","abort","startChunking","promise","Object","assign","action","startBody","fileType","then","res","_this2","sessionId","data","session_id","end_offset","createChunks","catch","i","maxActiveChunks","uploadNextChunk","hasChunksToUpload","uploadChunk","chunksToUpload","length","finish","chunk","updateFileProgress","upload","addEventListener","evt","lengthComputable","Math","round","loaded","total","FormData","name","append","uploadBody","startOffset","blob","uploaded","retries","_this3","finishBody","_this4","parseInt","maxActive","type","size","completedProgress","chunksUploaded","uploadingProgress","reduce","_this5","min","filter","e","$destroy","$parent","addInputFile","target","constructor","$el","CHUNK_DEFAULT_OPTIONS","ChunkUploadDefaultHandler","String","Boolean","Number","multiple","Function","Array","value","input","document","createElement","window","files","webkitdirectory","directory","features","html5","ondrop","drop","maps","$nextTick","$forceUpdate","watchDrop","destroy","fileObject","error","success","undefined","watchActive","oldMaps","id","newFile","oldFile","emitFile","emitInput","_files","index","addIndex","isArray","addFiles","Blob","webkitRelativePath","relativePath","Element","el","putAction","postAction","timeout","random","toString","substr","emitFilter","maximum","clear","newFiles","concat","splice","replace","add","dataTransfer","items","item","getAsEntry","getAsFile","webkitGetAsEntry","_this","getEntry","results","entry","path","isFile","isDirectory","dropDirectory","dirReader","createReader","readEntries","entries","id1","id2","file1","get","file2","index1","indexOf","index2","isPrevent","$emit","uploading","update","code","message","extensions","RegExp","split","map","trim","join","search","customAction","shouldUseChunkUpload","uploadPut","uploadHtml5","uploadHtml4","chunkEnabled","chunkOptions","handler","minSize","HandlerClass","querys","encodeURIComponent","queryString","uploadXhr","form","File","filename","_file","speedTime","speedLoaded","onprogress","speedTime2","Date","now","toFixed","interval","setInterval","complete","fn","responseText","contentType","getResponseHeader","onabort","ontimeout","onKeydown","keyCode","preventDefault","iframe","src","setAttribute","appendChild","removeEventListener","doc","contentWindow","contentDocument","innerHTML","getResponseData","submit","parentNode","removeChild","thread","_el","dropElement","onDragenter","onDragleave","onDocumentDrop","onDragover","onDrop","querySelector","$root","dropActive","nodeName","explicitOriginalTarget","screenX","screenY","fromElement","offsetX","addDataTransfer"],"mappings":"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"}
=======
{"version":3,"file":"vue-upload-component.min.js","sources":["../src/utils/request.js","../src/chunk/ChunkUploadHandler.js","../src/InputFile.vue.js?rollup-plugin-vue=script.js","../src/FileUpload.vue.js?rollup-plugin-vue=script.js"],"sourcesContent":["/**\n * Creates a XHR request\n *\n * @param {Object} options\n */\nexport const createRequest = (options) => {\n  const xhr = new XMLHttpRequest()\n  xhr.open(options.method || 'GET', options.url)\n  xhr.responseType = 'json'\n  if (options.headers) {\n    Object.keys(options.headers).forEach(key => {\n      xhr.setRequestHeader(key, options.headers[key])\n    })\n  }\n\n  return xhr\n}\n\n/**\n * Sends a XHR request with certain body\n *\n * @param {XMLHttpRequest} xhr\n * @param {Object} body\n */\nexport const sendRequest = (xhr, body) => {\n  return new Promise((resolve, reject) => {\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        var response\n        try {\n          response = JSON.parse(xhr.response)\n        } catch (err) {\n          response = xhr.response\n        }\n        resolve(response)\n      } else {\n        reject(xhr.response)\n      }\n    }\n    xhr.onerror = () => reject(xhr.response)\n    xhr.send(JSON.stringify(body))\n  })\n}\n\n/**\n * Sends a XHR request with certain form data\n *\n * @param {XMLHttpRequest} xhr\n * @param {Object} data\n */\nexport const sendFormRequest = (xhr, data) => {\n  const body = new FormData()\n  for (var name in data) {\n    body.append(name, data[name])\n  }\n\n  return new Promise((resolve, reject) => {\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        var response\n        try {\n          response = JSON.parse(xhr.response)\n        } catch (err) {\n          response = xhr.response\n        }\n        resolve(response)\n      } else {\n        reject(xhr.response)\n      }\n    }\n    xhr.onerror = () => reject(xhr.response)\n    xhr.send(body)\n  })\n}\n\n/**\n * Creates and sends XHR request\n *\n * @param {Object} options\n *\n * @returns Promise\n */\nexport default function (options) {\n  const xhr = createRequest(options)\n\n  return sendRequest(xhr, options.body)\n}\n","import {\n  default as request,\n  createRequest,\n  sendFormRequest\n} from '../utils/request'\n\nexport default class ChunkUploadHandler {\n  /**\n   * Constructor\n   *\n   * @param {File} file\n   * @param {Object} options\n   */\n  constructor (file, options) {\n    this.file = file\n    this.options = options\n  }\n\n  /**\n   * Gets the max retries from options\n   */\n  get maxRetries () {\n    return parseInt(this.options.maxRetries)\n  }\n\n  /**\n   * Gets the max number of active chunks being uploaded at once from options\n   */\n  get maxActiveChunks () {\n    return parseInt(this.options.maxActive)\n  }\n\n  /**\n   * Gets the file type\n   */\n  get fileType () {\n    return this.file.type\n  }\n\n  /**\n   * Gets the file size\n   */\n  get fileSize () {\n    return this.file.size\n  }\n\n  /**\n   * Gets the file size\n   */\n  get fileName () {\n    return this.file.name\n  }\n\n  /**\n   * Gets action (url) to upload the file\n   */\n  get action () {\n    return this.options.action || null\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in start phase\n   */\n  get startBody () {\n    return this.options.startBody || {}\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in upload phase\n   */\n  get uploadBody () {\n    return this.options.uploadBody || {}\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in finish phase\n   */\n  get finishBody () {\n    return this.options.finishBody || {}\n  }\n\n  /**\n   * Gets the headers of the requests from options\n   */\n  get headers () {\n    return this.options.headers || {}\n  }\n\n  /**\n   * Whether it's ready to upload files or not\n   */\n  get readyToUpload () {\n    return !!this.chunks\n  }\n\n  /**\n   * Gets the progress of the chunk upload\n   * - Gets all the completed chunks\n   * - Gets the progress of all the chunks that are being uploaded\n   */\n  get progress () {\n    const completedProgress = (this.chunksUploaded.length / this.chunks.length) * 100\n    const uploadingProgress = this.chunksUploading.reduce((progress, chunk) => {\n      return progress + ((chunk.progress | 0) / this.chunks.length)\n    }, 0)\n\n    return Math.min(completedProgress + uploadingProgress, 100)\n  }\n\n  /**\n   * Gets all the chunks that are pending to be uploaded\n   */\n  get chunksToUpload () {\n    return this.chunks.filter(chunk => {\n      return !chunk.active && !chunk.uploaded\n    })\n  }\n\n  /**\n   * Whether there are chunks to upload or not\n   */\n  get hasChunksToUpload () {\n    return this.chunksToUpload.length > 0\n  }\n\n  /**\n   * Gets all the chunks that are uploading\n   */\n  get chunksUploading () {\n    return this.chunks.filter(chunk => {\n      return !!chunk.xhr && !!chunk.active\n    })\n  }\n\n  /**\n   * Gets all the chunks that have finished uploading\n   */\n  get chunksUploaded () {\n    return this.chunks.filter(chunk => {\n      return !!chunk.uploaded\n    })\n  }\n\n  /**\n   * Creates all the chunks in the initial state\n   */\n  createChunks () {\n    this.chunks = []\n\n    let start = 0\n    let end = this.chunkSize\n    while (start < this.fileSize) {\n      this.chunks.push({\n        blob: this.file.file.slice(start, end),\n        startOffset: start,\n        active: false,\n        retries: this.maxRetries\n      })\n      start = end\n      end = start + this.chunkSize\n    }\n  }\n\n  /**\n   * Updates the progress of the file with the handler's progress\n   */\n  updateFileProgress () {\n    this.file.progress = this.progress\n  }\n\n  /**\n   * Paues the upload process\n   * - Stops all active requests\n   * - Sets the file not active\n   */\n  pause () {\n    this.file.active = false\n    this.stopChunks()\n  }\n\n  /**\n   * Stops all the current chunks\n   */\n  stopChunks () {\n    this.chunksUploading.forEach(chunk => {\n      chunk.xhr.abort()\n      chunk.active = false\n    })\n  }\n\n  /**\n   * Resumes the file upload\n   * - Sets the file active\n   * - Starts the following chunks\n   */\n  resume () {\n    this.file.active = true\n    this.startChunking()\n  }\n\n  /**\n   * Starts the file upload\n   *\n   * @returns Promise\n   * - resolve  The file was uploaded\n   * - reject   The file upload failed\n   */\n  upload () {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve\n      this.reject = reject\n    })\n    this.start()\n\n    return this.promise\n  }\n\n  /**\n   * Start phase\n   * Sends a request to the backend to initialise the chunks\n   */\n  start () {\n    request({\n      method: 'POST',\n      headers: Object.assign({}, this.headers, {\n        'Content-Type': 'application/json'\n      }),\n      url: this.action,\n      body: Object.assign(this.startBody, {\n        phase: 'start',\n        mime_type: this.fileType,\n        size: this.fileSize,\n        name: this.fileName\n      })\n    }).then(res => {\n      if (res.status !== 'success') {\n        this.file.response = res\n        return this.reject('server')\n      }\n\n      this.sessionId = res.data.session_id\n      this.chunkSize = res.data.end_offset\n\n      this.createChunks()\n      this.startChunking()\n    }).catch(res => {\n      this.file.response = res\n      this.reject('server')\n    })\n  }\n\n  /**\n   * Starts to upload chunks\n   */\n  startChunking () {\n    for (let i = 0; i < this.maxActiveChunks; i++) {\n      this.uploadNextChunk()\n    }\n  }\n\n  /**\n   * Uploads the next chunk\n   * - Won't do anything if the process is paused\n   * - Will start finish phase if there are no more chunks to upload\n   */\n  uploadNextChunk () {\n    if (this.file.active) {\n      if (this.hasChunksToUpload) {\n        return this.uploadChunk(this.chunksToUpload[0])\n      }\n\n      if (this.chunksUploading.length === 0) {\n        return this.finish()\n      }\n    }\n  }\n\n  /**\n   * Uploads a chunk\n   * - Sends the chunk to the backend\n   * - Sets the chunk as uploaded if everything went well\n   * - Decreases the number of retries if anything went wrong\n   * - Fails if there are no more retries\n   *\n   * @param {Object} chunk\n   */\n  uploadChunk (chunk) {\n    chunk.progress = 0\n    chunk.active = true\n    this.updateFileProgress()\n    chunk.xhr = createRequest({\n      method: 'POST',\n      headers: this.headers,\n      url: this.action\n    })\n\n    chunk.xhr.upload.addEventListener('progress', function (evt) {\n      if (evt.lengthComputable) {\n        chunk.progress = Math.round(evt.loaded / evt.total * 100)\n      }\n    }, false)\n\n    sendFormRequest(chunk.xhr, Object.assign(this.uploadBody, {\n      phase: 'upload',\n      session_id: this.sessionId,\n      start_offset: chunk.startOffset,\n      chunk: chunk.blob\n    })).then(res => {\n      chunk.active = false\n      if (res.status === 'success') {\n        chunk.uploaded = true\n      } else {\n        if (chunk.retries-- <= 0) {\n          this.stopChunks()\n          return this.reject('upload')\n        }\n      }\n\n      this.uploadNextChunk()\n    }).catch(() => {\n      chunk.active = false\n      if (chunk.retries-- <= 0) {\n        this.stopChunks()\n        return this.reject('upload')\n      }\n\n      this.uploadNextChunk()\n    })\n  }\n\n  /**\n   * Finish phase\n   * Sends a request to the backend to finish the process\n   */\n  finish () {\n    this.updateFileProgress()\n\n    request({\n      method: 'POST',\n      headers: Object.assign({}, this.headers, {\n        'Content-Type': 'application/json'\n      }),\n      url: this.action,\n      body: Object.assign(this.finishBody, {\n        phase: 'finish',\n        session_id: this.sessionId\n      })\n    }).then(res => {\n      this.file.response = res\n      if (res.status !== 'success') {\n        return this.reject('server')\n      }\n\n      this.resolve(res)\n    }).catch(res => {\n      this.file.response = res\n      this.reject('server')\n    })\n  }\n}\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  methods: {\n    change(e) {\n      this.$destroy()\n      this.$parent.addInputFile(e.target)\n      // eslint-disable-next-line\n      new this.constructor({\n        parent: this.$parent,\n        el: this.$el,\n      })\n    }\n  }\n}\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ChunkUploadDefaultHandler from './chunk/ChunkUploadHandler'\nimport InputFile from './InputFile.vue'\n\nconst CHUNK_DEFAULT_OPTIONS = {\n  headers: {},\n  action: '',\n  minSize: 1048576,\n  maxActive: 3,\n  maxRetries: 5,\n\n  handler: ChunkUploadDefaultHandler\n}\n\nexport default {\n  components: {\n    InputFile,\n  },\n  props: {\n    inputId: {\n      type: String,\n    },\n\n    name: {\n      type: String,\n      default: 'file',\n    },\n\n    accept: {\n      type: String,\n    },\n\n    capture: {\n    },\n\n    multiple: {\n      type: Boolean,\n    },\n\n    maximum: {\n      type: Number,\n      default() {\n        return this.multiple ? 0 : 1\n      }\n    },\n\n    addIndex: {\n      type: [Boolean, Number],\n    },\n\n    directory: {\n      type: Boolean,\n    },\n\n    postAction: {\n      type: String,\n    },\n\n    putAction: {\n      type: String,\n    },\n\n    customAction: {\n      type: Function,\n    },\n\n    headers: {\n      type: Object,\n      default: Object,\n    },\n\n    data: {\n      type: Object,\n      default: Object,\n    },\n\n    timeout: {\n      type: Number,\n      default: 0,\n    },\n\n\n    drop: {\n      default: false,\n    },\n\n    dropDirectory: {\n      type: Boolean,\n      default: true,\n    },\n\n    size: {\n      type: Number,\n      default: 0,\n    },\n\n    extensions: {\n      default: Array,\n    },\n\n\n    value: {\n      type: Array,\n      default: Array,\n    },\n\n    thread: {\n      type: Number,\n      default: 1,\n    },\n\n    // Chunk upload enabled\n    chunkEnabled: {\n      type: Boolean,\n      default: false\n    },\n\n    // Chunk upload properties\n    chunk: {\n      type: Object,\n      default: () => {\n        return CHUNK_DEFAULT_OPTIONS\n      }\n    }\n  },\n\n  data() {\n    return {\n      files: this.value,\n      features: {\n        html5: true,\n        directory: false,\n        drag: false,\n      },\n\n      active: false,\n      dropActive: false,\n\n      uploading: 0,\n\n      destroy: false,\n    }\n  },\n\n\n  /**\n   * mounted\n   * @return {[type]} [description]\n   */\n  mounted() {\n    let input = document.createElement('input')\n    input.type = 'file'\n    input.multiple = true\n\n    // html5 特征\n    if (window.FormData && input.files) {\n      // 上传目录特征\n      if (typeof input.webkitdirectory === 'boolean' || typeof input.directory === 'boolean') {\n        this.features.directory = true\n      }\n\n      // 拖拽特征\n      if (this.features.html5 && typeof input.ondrop !== 'undefined') {\n        this.features.drop = true\n      }\n    } else {\n      this.features.html5 = false\n    }\n\n    // files 定位缓存\n    this.maps = {}\n\n    this.$nextTick(function () {\n\n      // 更新下父级\n      if (this.$parent) {\n        this.$parent.$forceUpdate()\n      }\n\n      // 拖拽渲染\n      this.watchDrop(this.drop)\n    })\n  },\n\n  /**\n   * beforeDestroy\n   * @return {[type]} [description]\n   */\n  beforeDestroy() {\n    // 已销毁\n    this.destroy = true\n\n    // 设置成不激活\n    this.active = false\n  },\n\n  computed: {\n    /**\n     * uploading 正在上传的线程\n     * @return {[type]} [description]\n     */\n\n    /**\n     * uploaded 文件列表是否全部已上传\n     * @return {[type]} [description]\n     */\n    uploaded() {\n      let file\n      for (let i = 0; i < this.files.length; i++) {\n        file = this.files[i]\n        if (file.fileObject && !file.error && !file.success) {\n          return false\n        }\n      }\n      return true\n    },\n\n    chunkOptions () {\n      return Object.assign(CHUNK_DEFAULT_OPTIONS, this.chunk)\n    },\n\n    className() {\n      return [\n        'file-uploads',\n        this.features.html5 ? 'file-uploads-html5' : 'file-uploads-html4',\n        this.features.directory && this.directory ? 'file-uploads-directory' : undefined,\n        this.features.drop && this.drop ? 'file-uploads-drop' : undefined,\n      ]\n    }\n  },\n\n\n  watch: {\n    active(active) {\n      this.watchActive(active)\n    },\n\n    dropActive() {\n      if (this.$parent) {\n        this.$parent.$forceUpdate()\n      }\n    },\n\n    drop(value) {\n      this.watchDrop(value)\n    },\n\n    value(files) {\n      if (this.files === files) {\n        return\n      }\n      this.files = files\n\n      let oldMaps = this.maps\n\n      // 重写 maps 缓存\n      this.maps = {}\n      for (let i = 0; i < this.files.length; i++) {\n        let file = this.files[i]\n        this.maps[file.id] = file\n      }\n\n      // add, update\n      for (let key in this.maps) {\n        let newFile = this.maps[key]\n        let oldFile = oldMaps[key]\n        if (newFile !== oldFile) {\n          this.emitFile(newFile, oldFile)\n        }\n      }\n\n      // delete\n      for (let key in oldMaps) {\n        if (!this.maps[key]) {\n          this.emitFile(undefined, oldMaps[key])\n        }\n      }\n    },\n  },\n\n  methods: {\n\n    // 清空\n    clear() {\n      if (this.files.length) {\n        let files = this.files\n        this.files = []\n\n        // 定位\n        this.maps = {}\n\n        // 事件\n        this.emitInput()\n        for (let i = 0; i < files.length; i++) {\n          this.emitFile(undefined, files[i])\n        }\n      }\n      return true\n    },\n\n    // 选择\n    get(id) {\n      if (!id) {\n        return false\n      }\n\n      if (typeof id === 'object') {\n        return this.maps[id.id] || false\n      }\n\n      return this.maps[id] || false\n    },\n\n    // 添加\n    add(_files, index = this.addIndex) {\n      let files = _files\n      let isArray = files instanceof Array\n\n      // 不是数组整理成数组\n      if (!isArray) {\n        files = [files]\n      }\n\n      // 遍历规范对象\n      let addFiles = []\n      for (let i = 0; i < files.length; i++) {\n        let file = files[i]\n        if (this.features.html5 && file instanceof Blob) {\n          file = {\n            file,\n            size: file.size,\n            name: file.webkitRelativePath || file.relativePath || file.name || 'unknown',\n            type: file.type,\n          }\n        }\n        let fileObject = false\n        if (file.fileObject === false) {\n          // false\n        } else if (file.fileObject) {\n          fileObject = true\n        } else if (typeof Element !== 'undefined' && file.el instanceof Element) {\n          fileObject = true\n        } else if (typeof Blob !== 'undefined' && file.file instanceof Blob) {\n          fileObject = true\n        }\n        if (fileObject) {\n          file = {\n            fileObject: true,\n            size: -1,\n            name: 'Filename',\n            type: '',\n            active: false,\n            error: '',\n            success: false,\n            putAction: this.putAction,\n            postAction: this.postAction,\n            timeout: this.timeout,\n            ...file,\n            response: {},\n\n            progress: '0.00',          // 只读\n            speed: 0,                  // 只读\n            // xhr: false,                // 只读\n            // iframe: false,             // 只读\n          }\n\n          file.data = {\n            ...this.data,\n            ...file.data ? file.data : {},\n          }\n\n          file.headers = {\n            ...this.headers,\n            ...file.headers ? file.headers : {},\n          }\n        }\n\n        // 必须包含 id\n        if (!file.id) {\n          file.id = Math.random().toString(36).substr(2)\n        }\n\n        if (this.emitFilter(file, undefined)) {\n          continue\n        }\n\n        // 最大数量限制\n        if (this.maximum > 1 && (addFiles.length + this.files.length) >= this.maximum) {\n          break\n        }\n\n        addFiles.push(file)\n\n        // 最大数量限制\n        if (this.maximum === 1) {\n          break\n        }\n      }\n\n      // 没有文件\n      if (!addFiles.length) {\n        return false\n      }\n\n      // 如果是 1 清空\n      if (this.maximum === 1) {\n        this.clear()\n      }\n\n\n      // 添加进去 files\n      let newFiles\n      if (index === true || index === 0) {\n        newFiles = addFiles.concat(this.files)\n      } else if (index) {\n        newFiles = addFiles.concat([])\n        newFiles.splice(index, 0, addFiles)\n      } else {\n        newFiles = this.files.concat(addFiles)\n      }\n\n      this.files = newFiles\n\n      // 定位\n      for (let i = 0; i < addFiles.length; i++) {\n        let file = addFiles[i]\n        this.maps[file.id] = file\n      }\n\n      // 事件\n      this.emitInput()\n      for (let i = 0; i < addFiles.length; i++) {\n        this.emitFile(addFiles[i], undefined)\n      }\n\n      return isArray ? addFiles : addFiles[0]\n    },\n\n\n\n    // 添加表单文件\n    addInputFile(el) {\n      let files = []\n      if (el.files) {\n        for (let i = 0; i < el.files.length; i++) {\n          let file = el.files[i]\n          files.push({\n            size: file.size,\n            name: file.webkitRelativePath || file.relativePath || file.name,\n            type: file.type,\n            file,\n            el\n          })\n        }\n      } else {\n        var names = el.value.replace(/\\\\/g, '/').split('/')\n        files.push({\n          name: names[names.length - 1],\n          el,\n        })\n      }\n      return this.add(files)\n    },\n\n\n    // 添加 DataTransfer\n    addDataTransfer(dataTransfer) {\n      let files = []\n      if (dataTransfer.items && dataTransfer.items.length) {\n        let items = []\n        for (let i = 0; i < dataTransfer.items.length; i++) {\n          let item = dataTransfer.items[i]\n          if (item.getAsEntry) {\n            item = item.getAsEntry() || item.getAsFile()\n          } else if (item.webkitGetAsEntry) {\n            item = item.webkitGetAsEntry() || item.getAsFile()\n          } else {\n            item = item.getAsFile()\n          }\n          if (item) {\n            items.push(item)\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          let forEach = (i) => {\n            let item = items[i]\n            // 结束 文件数量大于 最大数量\n            if (!item || (this.maximum > 0 && files.length >= this.maximum)) {\n              return resolve(this.add(files))\n            }\n            this.getEntry(item).then(function (results) {\n              files.push(...results)\n              forEach(i + 1)\n            })\n          }\n          forEach(0)\n        })\n      }\n\n      if (dataTransfer.files.length) {\n        for (let i = 0; i < dataTransfer.files.length; i++) {\n          files.push(dataTransfer.files[i])\n          if (this.maximum > 0 && files.length >= this.maximum) {\n            break\n          }\n        }\n        return Promise.resolve(this.add(files))\n      }\n\n      return Promise.resolve([])\n    },\n\n\n    // 获得 entry\n    getEntry(entry, path = '') {\n      return new Promise((resolve, reject) => {\n        if (entry.isFile) {\n          entry.file(function (file) {\n            resolve([\n              {\n                size: file.size,\n                name: path + file.name,\n                type: file.type,\n                file,\n              }\n            ])\n          })\n        } else if (entry.isDirectory && this.dropDirectory) {\n          let files = []\n          let dirReader = entry.createReader()\n          let readEntries = () => {\n            dirReader.readEntries((entries) => {\n              let forEach = (i) => {\n                if ((!entries[i] && i === 0) || (this.maximum > 0 && files.length >= this.maximum)) {\n                  return resolve(files)\n                }\n                if (!entries[i]) {\n                  return readEntries()\n                }\n                this.getEntry(entries[i], path + entry.name + '/').then((results) => {\n                  files.push(...results)\n                  forEach(i + 1)\n                })\n              }\n              forEach(0)\n            })\n          }\n          readEntries()\n        } else {\n          resolve([])\n        }\n      })\n    },\n\n\n    replace(id1, id2) {\n      let file1 = this.get(id1)\n      let file2 = this.get(id2)\n      if (!file1 || !file2 || file1 === file2) {\n        return false\n      }\n      let files = this.files.concat([])\n      let index1 = files.indexOf(file1)\n      let index2 = files.indexOf(file2)\n      if (index1 === -1 || index2 === -1) {\n        return false\n      }\n      files[index1] = file2\n      files[index2] = file1\n      this.files = files\n      this.emitInput()\n      return true\n    },\n\n    // 移除\n    remove(id) {\n      let file = this.get(id)\n      if (file) {\n        if (this.emitFilter(undefined, file)) {\n          return false\n        }\n        let files = this.files.concat([])\n        let index = files.indexOf(file)\n        if (index === -1) {\n          console.error('remove', file)\n          return false\n        }\n        files.splice(index, 1)\n        this.files = files\n\n        // 定位\n        delete this.maps[file.id]\n\n        // 事件\n        this.emitInput()\n        this.emitFile(undefined, file)\n      }\n      return file\n    },\n\n    // 更新\n    update(id, data) {\n      let file = this.get(id)\n      if (file) {\n        let newFile = {\n          ...file,\n          ...data\n        }\n        // 停用必须加上错误\n        if (file.fileObject && file.active && !newFile.active && !newFile.error && !newFile.success) {\n          newFile.error = 'abort'\n        }\n\n        if (this.emitFilter(newFile, file)) {\n          return false\n        }\n\n        let files = this.files.concat([])\n        let index = files.indexOf(file)\n        if (index === -1) {\n          console.error('update', file)\n          return false\n        }\n        files.splice(index, 1, newFile)\n        this.files = files\n\n        // 删除  旧定位 写入 新定位 （已便支持修改id)\n        delete this.maps[file.id]\n        this.maps[newFile.id] = newFile\n\n        // 事件\n        this.emitInput()\n        this.emitFile(newFile, file)\n        return newFile\n      }\n      return false\n    },\n\n\n\n    // 预处理 事件 过滤器\n    emitFilter(newFile, oldFile) {\n      let isPrevent = false\n      this.$emit('input-filter', newFile, oldFile, function () {\n        isPrevent = true\n        return isPrevent\n      })\n      return isPrevent\n    },\n\n    // 处理后 事件 分发\n    emitFile(newFile, oldFile) {\n      this.$emit('input-file', newFile, oldFile)\n      if (newFile && newFile.fileObject && newFile.active && (!oldFile || !oldFile.active)) {\n        this.uploading++\n        // 激活\n        this.$nextTick(function () {\n          setTimeout(() => {\n            this.upload(newFile).then(() => {\n              // eslint-disable-next-line\n              newFile = this.get(newFile)\n              if (newFile && newFile.fileObject) {\n                this.update(newFile, {\n                  active: false,\n                  success: !newFile.error\n                })\n              }\n            }).catch((e) => {\n              this.update(newFile, {\n                active: false,\n                success: false,\n                error: e.code || e.error || e.message || e\n              })\n            })\n          }, parseInt(Math.random() * 50 + 50, 10))\n        })\n      } else if ((!newFile || !newFile.fileObject || !newFile.active) && oldFile && oldFile.fileObject && oldFile.active) {\n        // 停止\n        this.uploading--\n      }\n\n      // 自动延续激活\n      if (this.active && (Boolean(newFile) !== Boolean(oldFile) || newFile.active !== oldFile.active)) {\n        this.watchActive(true)\n      }\n    },\n\n    emitInput() {\n      this.$emit('input', this.files)\n    },\n\n\n    // 上传\n    upload(id) {\n      let file = this.get(id)\n\n      // 被删除\n      if (!file) {\n        return Promise.reject('not_exists')\n      }\n\n      // 不是文件对象\n      if (!file.fileObject) {\n        return Promise.reject('file_object')\n      }\n\n      // 有错误直接响应\n      if (file.error) {\n        return Promise.reject(file.error)\n      }\n\n      // 已完成直接响应\n      if (file.success) {\n        return Promise.resolve(file)\n      }\n\n      // 后缀\n      let extensions = this.extensions\n      if (extensions && (extensions.length || typeof extensions.length === 'undefined')) {\n        if (typeof extensions !== 'object' || !(extensions instanceof RegExp)) {\n          if (typeof extensions === 'string') {\n            extensions = extensions.split(',').map(value => value.trim()).filter(value => value)\n          }\n          extensions = new RegExp('\\\\.(' + extensions.join('|').replace(/\\./g, '\\\\.') + ')$', 'i')\n        }\n        if (file.name.search(extensions) === -1) {\n          return Promise.reject('extension')\n        }\n      }\n\n      // 大小\n      if (this.size > 0 && file.size >= 0 && file.size > this.size) {\n        return Promise.reject('size')\n      }\n\n      if (this.customAction) {\n        return this.customAction(file, this)\n      }\n\n      if (this.features.html5) {\n        if (this.shouldUseChunkUpload(file)) {\n          return this.uploadChunk(file)\n        }\n        if (file.putAction) {\n          return this.uploadPut(file)\n        }\n        if (file.postAction) {\n          return this.uploadHtml5(file)\n        }\n      }\n      if (file.postAction) {\n        return this.uploadHtml4(file)\n      }\n      return Promise.reject('No action configured')\n    },\n\n    /**\n     * Whether this file should be uploaded using chunk upload or not\n     *\n     * @param Object file\n     */\n    shouldUseChunkUpload (file) {\n      return this.chunkEnabled &&\n        !!this.chunkOptions.handler &&\n        file.size > this.chunkOptions.minSize\n    },\n\n    /**\n     * Upload a file using Chunk method\n     *\n     * @param File file\n     */\n    uploadChunk (file) {\n      const HandlerClass = this.chunkOptions.handler\n      file.chunk = new HandlerClass(file, this.chunkOptions)\n\n      return file.chunk.upload()\n    },\n\n    uploadPut(file) {\n      let querys = []\n      let value\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value !== null && value !== undefined) {\n          querys.push(encodeURIComponent(key) + '=' + encodeURIComponent(value))\n        }\n      }\n      let queryString = querys.length ? (file.putAction.indexOf('?') === -1 ? '?' : '&') + querys.join('&') : ''\n      let xhr = new XMLHttpRequest()\n      xhr.open('PUT', file.putAction + queryString)\n      return this.uploadXhr(xhr, file, file.file)\n    },\n\n    uploadHtml5(file) {\n      let form = new window.FormData()\n      let value\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\n          if (value instanceof File) {\n            form.append(key, value, value.name)\n          } else {\n            form.append(key, JSON.stringify(value))\n          }\n        } else if (value !== null && value !== undefined) {\n          form.append(key, value)\n        }\n      }\n      form.append(this.name, file.file, file.file.filename || file.name)\n      let xhr = new XMLHttpRequest()\n      xhr.open('POST', file.postAction)\n      return this.uploadXhr(xhr, file, form)\n    },\n\n    uploadXhr(xhr, _file, body) {\n      let file = _file\n      let speedTime = 0\n      let speedLoaded = 0\n\n      // 进度条\n      xhr.upload.onprogress = (e) => {\n        // 还未开始上传 已删除 未激活\n        file = this.get(file)\n        if (!e.lengthComputable || !file || !file.fileObject || !file.active) {\n          return\n        }\n\n        // 进度 速度 每秒更新一次\n        let speedTime2 = Math.round(Date.now() / 1000)\n        if (speedTime2 === speedTime) {\n          return\n        }\n        speedTime = speedTime2\n\n        file = this.update(file, {\n          progress: (e.loaded / e.total * 100).toFixed(2),\n          speed: e.loaded - speedLoaded,\n        })\n        speedLoaded = e.loaded\n      }\n\n      // 检查激活状态\n      let interval = setInterval(() => {\n        file = this.get(file)\n        if (file && file.fileObject && !file.success && !file.error && file.active) {\n          return\n        }\n\n        if (interval) {\n          clearInterval(interval)\n          interval = false\n        }\n\n        try {\n          xhr.abort()\n          xhr.timeout = 1\n        } catch (e) {\n        }\n      }, 100)\n\n      return new Promise((resolve, reject) => {\n        let complete\n        let fn = (e) => {\n          // 已经处理过了\n          if (complete) {\n            return\n          }\n          complete = true\n          if (interval) {\n            clearInterval(interval)\n            interval = false\n          }\n\n          file = this.get(file)\n\n          // 不存在直接响应\n          if (!file) {\n            return reject('not_exists')\n          }\n\n          // 不是文件对象\n          if (!file.fileObject) {\n            return reject('file_object')\n          }\n\n          // 有错误自动响应\n          if (file.error) {\n            return reject(file.error)\n          }\n\n          // 未激活\n          if (!file.active) {\n            return reject('abort')\n          }\n\n\n          // 已完成 直接相应\n          if (file.success) {\n            return resolve(file)\n          }\n\n          let data = {}\n\n          switch (e.type) {\n            case 'timeout':\n            case 'abort':\n              data.error = e.type\n              break\n            case 'error':\n              if (!xhr.status) {\n                data.error = 'network'\n              } else if (xhr.status >= 500) {\n                data.error = 'server'\n              } else if (xhr.status >= 400) {\n                data.error = 'denied'\n              }\n              break\n            default:\n              if (xhr.status >= 500) {\n                data.error = 'server'\n              } else if (xhr.status >= 400) {\n                data.error = 'denied'\n              } else {\n                data.progress = '100.00'\n              }\n          }\n\n          if (xhr.responseText) {\n            let contentType = xhr.getResponseHeader('Content-Type')\n            if (contentType && contentType.indexOf('/json') !== -1) {\n              data.response = JSON.parse(xhr.responseText)\n            } else {\n              data.response = xhr.responseText\n            }\n          }\n\n          // 更新\n          file = this.update(file, data)\n\n          // 相应错误\n          if (file.error) {\n            return reject(file.error)\n          }\n\n          // 响应\n          return resolve(file)\n        }\n\n        // 事件\n        xhr.onload = fn\n        xhr.onerror = fn\n        xhr.onabort = fn\n        xhr.ontimeout = fn\n\n        // 超时\n        if (file.timeout) {\n          xhr.timeout = file.timeout\n        }\n\n        // headers\n        for (let key in file.headers) {\n          xhr.setRequestHeader(key, file.headers[key])\n        }\n\n        // 更新 xhr\n        file = this.update(file, { xhr })\n\n        // 开始上传\n        xhr.send(body)\n      })\n    },\n\n\n\n\n    uploadHtml4(_file) {\n      let file = _file\n      let onKeydown = function (e) {\n        if (e.keyCode === 27) {\n          e.preventDefault()\n        }\n      }\n\n      let iframe = document.createElement('iframe')\n      iframe.id = 'upload-iframe-' + file.id\n      iframe.name = 'upload-iframe-' + file.id\n      iframe.src = 'about:blank'\n      iframe.setAttribute('style', 'width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;')\n\n\n      let form = document.createElement('form')\n\n      form.action = file.postAction\n\n      form.name = 'upload-form-' + file.id\n\n\n      form.setAttribute('method', 'POST')\n      form.setAttribute('target', 'upload-iframe-' + file.id)\n      form.setAttribute('enctype', 'multipart/form-data')\n\n      let value\n      let input\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\n          value = JSON.stringify(value)\n        }\n        if (value !== null && value !== undefined) {\n          input = document.createElement('input')\n          input.type = 'hidden'\n          input.name = key\n          input.value = value\n          form.appendChild(input)\n        }\n      }\n      form.appendChild(file.el)\n\n      document.body.appendChild(iframe).appendChild(form)\n\n\n\n\n      let getResponseData = function () {\n        let doc\n        try {\n          if (iframe.contentWindow) {\n            doc = iframe.contentWindow.document\n          }\n        } catch (err) {\n        }\n        if (!doc) {\n          try {\n            doc = iframe.contentDocument ? iframe.contentDocument : iframe.document\n          } catch (err) {\n            doc = iframe.document\n          }\n        }\n        if (doc && doc.body) {\n          return doc.body.innerHTML\n        }\n        return null\n      }\n\n\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          file = this.update(file, { iframe })\n\n          // 不存在\n          if (!file) {\n            return reject('not_exists')\n          }\n\n          // 定时检查\n          let interval = setInterval(() => {\n            file = this.get(file)\n            if (file && file.fileObject && !file.success && !file.error && file.active) {\n              return\n            }\n\n            if (interval) {\n              clearInterval(interval)\n              interval = false\n            }\n\n            iframe.onabort({ type: file ? 'abort' : 'not_exists' })\n          }, 100)\n\n\n          let complete\n          let fn = (e) => {\n            // 已经处理过了\n            if (complete) {\n              return\n            }\n            complete = true\n\n\n            if (interval) {\n              clearInterval(interval)\n              interval = false\n            }\n\n            // 关闭 esc 事件\n            document.body.removeEventListener('keydown', onKeydown)\n\n            file = this.get(file)\n\n            // 不存在直接响应\n            if (!file) {\n              return reject('not_exists')\n            }\n\n            // 不是文件对象\n            if (!file.fileObject) {\n              return reject('file_object')\n            }\n\n            // 有错误自动响应\n            if (file.error) {\n              return reject(file.error)\n            }\n\n            // 未激活\n            if (!file.active) {\n              return reject('abort')\n            }\n\n            // 已完成 直接相应\n            if (file.success) {\n              return resolve(file)\n            }\n\n            let response = getResponseData()\n            let data = {}\n            switch (e.type) {\n              case 'abort':\n                data.error = 'abort'\n                break\n              case 'error':\n                if (file.error) {\n                  data.error = file.error\n                } else if (response === null) {\n                  data.error = 'network'\n                } else {\n                  data.error = 'denied'\n                }\n                break\n              default:\n                if (file.error) {\n                  data.error = file.error\n                } else if (data === null) {\n                  data.error = 'network'\n                } else {\n                  data.progress = '100.00'\n                }\n            }\n\n            if (response !== null) {\n              if (response && response.substr(0, 1) === '{' && response.substr(response.length - 1, 1) === '}') {\n                try {\n                  response = JSON.parse(response)\n                } catch (err) {\n                }\n              }\n              data.response = response\n            }\n\n            // 更新\n            file = this.update(file, data)\n\n            if (file.error) {\n              return reject(file.error)\n            }\n\n            // 响应\n            return resolve(file)\n          }\n\n\n          // 添加事件\n          iframe.onload = fn\n          iframe.onerror = fn\n          iframe.onabort = fn\n\n\n          // 禁止 esc 键\n          document.body.addEventListener('keydown', onKeydown)\n\n          // 提交\n          form.submit()\n        }, 50)\n      }).then(function (res) {\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\n        return res\n      }).catch(function (res) {\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\n        return res\n      })\n    },\n\n\n\n    watchActive(active) {\n      let file\n      let index = 0\n      while ((file = this.files[index])) {\n        index++\n        if (!file.fileObject) {\n          // 不是文件对象\n        } else if (active && !this.destroy) {\n          if (this.uploading >= this.thread || (this.uploading && !this.features.html5)) {\n            break\n          }\n          if (!file.active && !file.error && !file.success) {\n            this.update(file, { active: true })\n          }\n        } else {\n          if (file.active) {\n            this.update(file, { active: false })\n          }\n        }\n      }\n      if (this.uploading === 0) {\n        this.active = false\n      }\n    },\n\n\n    watchDrop(_el) {\n      let el = _el\n      if (!this.features.drop) {\n        return\n      }\n\n      // 移除挂载\n      if (this.dropElement) {\n        try {\n          document.removeEventListener('dragenter', this.onDragenter, false)\n          document.removeEventListener('dragleave', this.onDragleave, false)\n          document.removeEventListener('drop', this.onDocumentDrop, false)\n          this.dropElement.removeEventListener('dragover', this.onDragover, false)\n          this.dropElement.removeEventListener('drop', this.onDrop, false)\n        } catch (e) {\n        }\n      }\n\n      if (!el) {\n        el = false\n      } else if (typeof el === 'string') {\n        el = document.querySelector(el) || this.$root.$el.querySelector(el)\n      } else if (el === true) {\n        el = this.$parent.$el\n      }\n\n      this.dropElement = el\n\n      if (this.dropElement) {\n        document.addEventListener('dragenter', this.onDragenter, false)\n        document.addEventListener('dragleave', this.onDragleave, false)\n        document.addEventListener('drop', this.onDocumentDrop, false)\n        this.dropElement.addEventListener('dragover', this.onDragover, false)\n        this.dropElement.addEventListener('drop', this.onDrop, false)\n      }\n    },\n\n\n    onDragenter(e) {\n      e.preventDefault()\n      if (!this.dropActive) {\n        this.dropActive = true\n      }\n    },\n\n    onDragleave(e) {\n      e.preventDefault()\n      if (e.target.nodeName === 'HTML' || e.target === e.explicitOriginalTarget || (e.screenX === 0 && e.screenY === 0 && !e.fromElement && e.offsetX <= 0)) {\n        this.dropActive = false\n      }\n    },\n\n    onDragover(e) {\n      e.preventDefault()\n    },\n\n    onDocumentDrop() {\n      this.dropActive = false\n    },\n\n    onDrop(e) {\n      e.preventDefault()\n      this.addDataTransfer(e.dataTransfer)\n    },\n  }\n}\n"],"names":["createRequest","options","xhr","XMLHttpRequest","open","method","url","responseType","headers","keys","forEach","setRequestHeader","key","body","Promise","resolve","reject","onload","status","response","JSON","parse","err","onerror","send","stringify","ChunkUploadHandler","file","chunks","start","end","this","chunkSize","fileSize","push","slice","maxRetries","progress","active","stopChunks","chunksUploading","abort","startChunking","promise","Object","assign","action","startBody","fileType","fileName","then","res","_this2","sessionId","data","session_id","end_offset","createChunks","catch","i","maxActiveChunks","uploadNextChunk","hasChunksToUpload","uploadChunk","chunksToUpload","length","finish","chunk","updateFileProgress","upload","addEventListener","evt","lengthComputable","Math","round","loaded","total","FormData","name","append","uploadBody","startOffset","blob","uploaded","retries","_this3","finishBody","_this4","parseInt","maxActive","type","size","completedProgress","chunksUploaded","uploadingProgress","reduce","_this5","min","filter","e","$destroy","$parent","addInputFile","target","constructor","$el","CHUNK_DEFAULT_OPTIONS","ChunkUploadDefaultHandler","String","Boolean","Number","multiple","Function","Array","value","input","document","createElement","window","files","webkitdirectory","directory","features","html5","ondrop","drop","maps","$nextTick","$forceUpdate","watchDrop","destroy","fileObject","error","success","undefined","watchActive","oldMaps","id","newFile","oldFile","emitFile","emitInput","_files","index","addIndex","isArray","addFiles","Blob","webkitRelativePath","relativePath","Element","el","putAction","postAction","timeout","random","toString","substr","emitFilter","maximum","clear","newFiles","concat","splice","names","replace","split","add","dataTransfer","items","item","getAsEntry","getAsFile","webkitGetAsEntry","_this","getEntry","results","entry","path","isFile","isDirectory","dropDirectory","dirReader","createReader","readEntries","entries","id1","id2","file1","get","file2","index1","indexOf","index2","isPrevent","$emit","uploading","update","code","message","extensions","RegExp","map","trim","join","search","customAction","shouldUseChunkUpload","uploadPut","uploadHtml5","uploadHtml4","chunkEnabled","chunkOptions","handler","minSize","HandlerClass","querys","encodeURIComponent","queryString","uploadXhr","form","File","filename","_file","speedTime","speedLoaded","onprogress","speedTime2","Date","now","toFixed","interval","setInterval","complete","fn","responseText","contentType","getResponseHeader","onabort","ontimeout","onKeydown","keyCode","preventDefault","iframe","src","setAttribute","appendChild","removeEventListener","doc","contentWindow","contentDocument","innerHTML","getResponseData","submit","parentNode","removeChild","thread","_el","dropElement","onDragenter","onDragleave","onDocumentDrop","onDragover","onDrop","querySelector","$root","dropActive","nodeName","explicitOriginalTarget","screenX","screenY","fromElement","offsetX","addDataTransfer"],"mappings":"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"}
>>>>>>> f45a552a33b2dbab3f29c4bb48e4f0e49cd67f01
